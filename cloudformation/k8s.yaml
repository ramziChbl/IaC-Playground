Parameters:
  RockyLinuxAMI:
    Type: String
  CommonStackName:
    Type: String

Resources:
  K8sNetwork:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: False
      Tags:
        - Key: Name
          Value: k8s-master

  K8sInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: k8s-igw

  K8sInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref K8sInternetGateway
      VpcId: !Ref K8sNetwork

  K8sRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref K8sNetwork
      Tags:
      - Key: Name
        Value: k8s-rt

  K8sDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: K8sInternetGatewayAttachment
    Properties:
       RouteTableId: !Ref K8sRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref K8sInternetGateway

  K8sMasterSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: "10.1.1.0/24"
      #MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: k8s-az1
      VpcId: !Ref K8sNetwork

  K8sMasterSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: "10.1.2.0/24"
      #MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: k8s-az2
      VpcId: !Ref K8sNetwork

  K8sMasterSubnetAz1DefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sMasterSubnetAz1
      RouteTableId: !Ref K8sRouteTable

  K8sMasterSubnetAz2DefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sMasterSubnetAz2
      RouteTableId: !Ref K8sRouteTable

  K8sSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH traffic from anywhere
      GroupName: k8s-allow-ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: k8s-allow-ssh
      VpcId: !Ref K8sNetwork

  K8sMasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: k8s-master-lt
      LaunchTemplateData:
        ImageId: !Ref RockyLinuxAMI
        InstanceType: t2.small
        KeyName:
          Fn::ImportValue: !Sub '${CommonStackName}-SSHKeyPairName'
        SecurityGroupIds:
          - !Ref K8sSSHSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: 'k8s-master'
        UserData:
          Fn::Base64: |
            #!/bin/bash
            dnf upgrade -y
            dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

  K8sMasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: k8s-master-ag
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sMasterLaunchTemplate
        Version: !GetAtt K8sMasterLaunchTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: '3'
      VPCZoneIdentifier:
        - !Ref K8sMasterSubnetAz1
        - !Ref K8sMasterSubnetAz2

Outputs:
  VPCId:
    Value: !Ref K8sNetwork
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  RouteTable:
    Value: !Ref K8sRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable"
