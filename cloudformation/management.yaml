Parameters:
  Region:
    Type: String
  RockyLinuxAMI:
    Type: String
  InternalHostedZoneName:
    Type: String
  SaltMasterFqdn:
    Type: String
  SaltConfigBucketName:
    Type: String
  CommonStackName:
    Type: String
  K8sMasterStackName:
    Type: String
Resources:
  MgmtNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: mgmt

  InternalHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'Private hosted zone for internal records'
      Name: !Ref InternalHostedZoneName
      VPCs:
        - VPCId: !Ref MgmtNetwork
          VPCRegion: !Ref Region

  MgmtInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: mgmt-igw

  MgmtInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MgmtInternetGateway
      VpcId: !Ref MgmtNetwork

  MgmtRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MgmtNetwork
      Tags:
      - Key: Name
        Value: mgmt-rt

  MgmtDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: MgmtInternetGatewayAttachment
    Properties:
       RouteTableId: !Ref MgmtRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref MgmtInternetGateway

  MgmtDefaultSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ] # us-east-1b
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: mgmt-default-subnet
      VpcId: !Ref MgmtNetwork

  MgmtDefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MgmtDefaultSubnet
      RouteTableId: !Ref MgmtRouteTable

  MgmtSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and Salt traffic
      GroupName: mgmt-allow-ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: Allow SSH traffic from anywhere
        - IpProtocol: tcp
          FromPort: 4505
          ToPort: 4506
          CidrIp: 10.0.0.0/8
          Description: Allow Salt minion requests from internal networks
      Tags:
        - Key: Name
          Value: mgmt-allow-ssh
      VpcId: !Ref MgmtNetwork

  OrchestratorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref RockyLinuxAMI
      SubnetId: !Ref MgmtDefaultSubnet
      KeyName:
        Fn::ImportValue: !Sub '${CommonStackName}-SSHKeyPairName'
      SecurityGroupIds:
        - !GetAtt MgmtSSHSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: orchestrator
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            dnf upgrade -y
            curl -sL https://bootstrap.saltproject.io -o /tmp/bootstrap-salt.sh
            chmod +x /tmp/bootstrap-salt.sh
            /tmp/bootstrap-salt.sh -M -N
            
            cp /etc/salt/master /etc/salt/master.bak
            # Write salt-master config
            cat << EOF > /etc/salt/master
            user: salt
            autosign_file: /etc/salt/autosign.conf
            file_roots:
              base:
                - /srv/salt
            EOF
            
            # Make salt-master auto-accept k8s-master minions
            cat << EOF > /etc/salt/autosign.conf
            ${K8sMasterStackName}.*.${InternalHostedZoneName}
            EOF

            systemctl restart salt-master

  OrchestratorDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref InternalHostedZone
      Name: !Ref SaltMasterFqdn
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt OrchestratorInstance.PrivateIp

  SaltConfigS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref SaltConfigBucketName

Outputs:
  VPCId:
    Value: !Ref MgmtNetwork
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  HostedZoneId:
    Description: 'The ID of the hosted zone.'
    Value: !Ref InternalHostedZone
    Export:
      Name: !Sub '${AWS::StackName}-InternalHostedZoneId'
  RouteTable:
    Value: !Ref MgmtRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable"
